services:
  ts-oauth-homepage:
      image: tailscale/tailscale:latest
      container_name: ts-oauth-homepage
      hostname: ts-oauth-homepage
      environment:
        - TS_AUTHKEY=${TS_AUTHKEY}
        - "TS_EXTRA_ARGS=--advertise-tags=tag:container --reset"
      volumes:
        - /dev/net/tun:/dev/net/tun
      cap_add:
        - net_admin
        - sys_module
      restart: unless-stopped
      ports:
        - "8000:80"

  homepage:
    image: homepage
    build:
      context: ../
      dockerfile: ./docker/Dockerfile.homepage
    container_name: homepage
    network_mode: service:ts-oauth-homepage
    platform: linux/arm64

  ts-oauth-auth:
    image: tailscale/tailscale:latest
    container_name: ts-oauth-auth
    hostname: ts-oauth-auth
    environment:
      - TS_AUTHKEY=${TS_AUTHKEY}
      - "TS_EXTRA_ARGS=--advertise-tags=tag:container --reset"
    volumes:
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - net_admin
      - sys_module
    restart: unless-stopped
    ports:
      - "8002:80"

  auth:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile.auth
    image: auth:latest 
    container_name: auth
    volumes:
      - shared-volume:/shared
    environment:
      - SHARED_VOLUME=/shared
    network_mode: service:ts-oauth-auth
    platform: linux/arm64

  agentserver:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile.agentserver
    container_name: agentserver
    image: agentserver:latest
    ports:
      - "8000:80"
    platform: linux/arm64
  
  ts-oauth-docs:
      image: tailscale/tailscale:latest
      container_name: ts-oauth-docs
      hostname: ts-oauth-docs
      environment:
        - TS_AUTHKEY=${TS_AUTHKEY}
        - "TS_EXTRA_ARGS=--advertise-tags=tag:container --reset"
      volumes:
        - /dev/net/tun:/dev/net/tun
      cap_add:
        - net_admin
        - sys_module
      restart: unless-stopped
      ports:
        - "8000:80"
  docs:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile.docs
    container_name: docs
    image: docs
    network_mode: service:ts-oauth-docs
    depends_on: 
      - "ts-oauth-docs"
    platform: linux/arm64 

  ts-oauth-main:
    image: tailscale/tailscale:latest
    container_name: ts-oauth-main
    hostname: ts-oauth-main
    environment:
      - TS_AUTHKEY=${TS_AUTHKEY}
      - "TS_EXTRA_ARGS=--advertise-tags=tag:container --reset"
    volumes:
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - net_admin
      - sys_module
    restart: unless-stopped
    ports:
      - "8000:80"
  
  main: 
    build:
      context: ../
      dockerfile: ./docker/Dockerfile.main
    container_name: main
    image: main
    network_mode: service:ts-oauth-main
    depends_on: 
      - "ts-oauth-main"
    platform: linux/arm64

  postgres:
    image: postgres:16
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - /var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=local_password
      - POSTGRES_USER=local_user
      - POSTGRES_DB=local_db

  ts-oauth-api:
    image: tailscale/tailscale:latest
    container_name: ts-oauth-api
    hostname: ts-oauth-api
    environment:
      - TS_AUTHKEY=${TS_AUTHKEY}
      - "TS_EXTRA_ARGS=--advertise-tags=tag:container --reset"
    volumes:
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - net_admin
      - sys_module
    restart: unless-stopped
    ports:
      - "8000:80"
  
  api:
    build: 
      context: ../
      dockerfile: ./docker/Dockerfile.api
    image: api
    container_name: api
    network_mode: service:ts-oauth-api
    depends_on: 
      - "ts-oauth-api"
    platform: linux/arm64
  
  alembic:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile.alembic
    image: alembic
    container_name: alembic
    platform: linux/arm64
    


volumes:
  shared-volume:
  

networks:
  postgres-network:
    driver: bridge