# A generic, single database configuration.

[alembic]
# path to migration scripts
# Use forward slashes (/) also on windows to provide an os agnostic path
script_location = migrations

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# for all available tokens
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.
prepend_sys_path = .

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python>=3.9 or backports.zoneinfo library.
# Any required deps can installed by adding `alembic[tz]` to the pip requirements
# string value is passed to ZoneInfo()
# leave blank for localtime
# timezone =

# max length of characters to apply to the "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to migrations/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# The path separator used here should be the separator specified by "version_path_separator" below.
# version_locations = %(here)s/bar:%(here)s/bat:migrations/versions

# version path separator; As mentioned above, this is the character used to split
# version_locations. The default within new alembic.ini files is "os", which uses os.pathsep.
# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.
# Valid values for version_path_separator are:
#
# version_path_separator = :
# version_path_separator = ;
# version_path_separator = space
version_path_separator = os  # Use os.pathsep. Default configuration used for new projects.

# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

sqlalchemy.url = postgresql+psycopg://local_user:local_password@localhost:5432/local_db


[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# lint with attempts to fix using "ruff" - use the exec runner, execute a binary
# hooks = ruff
# ruff.type = exec
# ruff.executable = %(here)s/.venv/bin/ruff
# ruff.options = --fix REVISION_SCRIPT_FILENAME

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
# Additional Configuration Options for Alembic

## Migration Script Location

- **script_location**: Specifies the directory where migration scripts are stored. It is recommended to use forward slashes (/) for compatibility across different operating systems.

## Migration File Naming

- **file_template**: This option allows customization of the naming convention for migration files. The default format is `%%(rev)s_%%(slug)s`. Uncommenting the line and modifying it can prepend date and time to the filenames. Refer to the Alembic documentation for available tokens.

## Python Path Configuration

- **prepend_sys_path**: This setting allows you to specify a path that will be added to the Python system path before executing migration scripts. The default is the current working directory.

## Timezone Configuration

- **timezone**: This option allows you to set the timezone for rendering dates in migration files and filenames. If left blank, the local time will be used. Requires Python 3.9 or the backports.zoneinfo library.

## Slug Field Length

- **truncate_slug_length**: Defines the maximum number of characters for the "slug" field in migration filenames. The default is 40 characters.

## Revision Environment Execution

- **revision_environment**: Set this to 'true' to execute the environment during the 'revision' command, regardless of whether autogenerate is enabled.

## Source File Detection

- **sourceless**: If set to 'true', this option allows .pyc and .pyo files without a corresponding .py file to be recognized as revisions in the versions directory.

## Version Location Specification

- **version_locations**: This option allows you to specify multiple version directories for migrations. The default is `migrations/versions`. When using multiple directories, initial revisions must be specified with the `--version-path` option.

## Version Path Separator

- **version_path_separator**: Defines the character used to separate multiple version locations. The default is "os", which uses the operating system's path separator.

## Recursive Version Location Search

- **recursive_version_locations**: When set to 'true', this option enables recursive searching of source files in each specified version location directory. This feature was introduced in Alembic version 1.10.

## Output Encoding

- **output_encoding**: Specifies the encoding used when writing revision files. The default is UTF-8.

## Post Write Hooks

- **post_write_hooks**: This section allows you to define scripts or Python functions that will be executed on newly generated revision scripts. Examples include formatting with "black" or linting with "ruff".

## Logging Configuration

- **loggers**: This section defines the logging configuration for the application, including the root logger and specific loggers for SQLAlchemy and Alembic.

- **handlers**: Specifies the handlers for logging output, such as console output.

- **formatters**: Defines the format for log messages, including the date format and message structure.