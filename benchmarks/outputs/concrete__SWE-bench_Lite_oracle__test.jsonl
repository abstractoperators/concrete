{"instance_id": "django__django-11099", "model_name_or_path": "concrete", "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nUsernameValidator allows trailing newline in usernames\nDescription\n\t\nASCIIUsernameValidator and UnicodeUsernameValidator use the regex \nr'^[\\w.@+-]+$'\nThe intent is to only allow alphanumeric characters as well as ., @, +, and -. However, a little known quirk of Python regexes is that $ will also match a trailing newline. Therefore, the user name validators will accept usernames which end with a newline. You can avoid this behavior by instead using \\A and \\Z to terminate regexes. For example, the validator regex could be changed to\nr'\\A[\\w.@+-]+\\Z'\nin order to reject usernames that end with a newline.\nI am not sure how to officially post a patch, but the required change is trivial - using the regex above in the two validators in contrib.auth.validators.\n\n</issue>\n<code>\n[start of README.rst]\n1 Django is a high-level Python Web framework that encourages rapid development\n2 and clean, pragmatic design. Thanks for checking it out.\n3 \n4 All documentation is in the \"``docs``\" directory and online at\n5 https://docs.djangoproject.com/en/stable/. If you're just getting started,\n6 here's how we recommend you read the docs:\n7 \n8 * First, read ``docs/intro/install.txt`` for instructions on installing Django.\n9 \n10 * Next, work through the tutorials in order (``docs/intro/tutorial01.txt``,\n11   ``docs/intro/tutorial02.txt``, etc.).\n12 \n13 * If you want to set up an actual deployment server, read\n14   ``docs/howto/deployment/index.txt`` for instructions.\n15 \n16 * You'll probably want to read through the topical guides (in ``docs/topics``)\n17   next; from there you can jump to the HOWTOs (in ``docs/howto``) for specific\n18   problems, and check out the reference (``docs/ref``) for gory details.\n19 \n20 * See ``docs/README`` for instructions on building an HTML version of the docs.\n21 \n22 Docs are updated rigorously. If you find any problems in the docs, or think\n23 they should be clarified in any way, please take 30 seconds to fill out a\n24 ticket here: https://code.djangoproject.com/newticket\n25 \n26 To get more help:\n27 \n28 * Join the ``#django`` channel on irc.freenode.net. Lots of helpful people hang\n29   out there. See https://en.wikipedia.org/wiki/Wikipedia:IRC/Tutorial if you're\n30   new to IRC.\n31 \n32 * Join the django-users mailing list, or read the archives, at\n33   https://groups.google.com/group/django-users.\n34 \n35 To contribute to Django:\n36 \n37 * Check out https://docs.djangoproject.com/en/dev/internals/contributing/ for\n38   information about getting involved.\n39 \n40 To run Django's test suite:\n41 \n42 * Follow the instructions in the \"Unit tests\" section of\n43   ``docs/internals/contributing/writing-code/unit-tests.txt``, published online at\n44   https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/unit-tests/#running-the-unit-tests\n45 \n[end of README.rst]\n[start of django/contrib/auth/validators.py]\n1 import re\n2 \n3 from django.core import validators\n4 from django.utils.deconstruct import deconstructible\n5 from django.utils.translation import gettext_lazy as _\n6 \n7 \n8 @deconstructible\n9 class ASCIIUsernameValidator(validators.RegexValidator):\n10     regex = r'^[\\w.@+-]+$'\n11     message = _(\n12         'Enter a valid username. This value may contain only English letters, '\n13         'numbers, and @/./+/-/_ characters.'\n14     )\n15     flags = re.ASCII\n16 \n17 \n18 @deconstructible\n19 class UnicodeUsernameValidator(validators.RegexValidator):\n20     regex = r'^[\\w.@+-]+$'\n21     message = _(\n22         'Enter a valid username. This value may contain only letters, '\n23         'numbers, and @/./+/-/_ characters.'\n24     )\n25     flags = 0\n26 \n[end of django/contrib/auth/validators.py]\n</code>\nI need you to solve this issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the following format.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\n\n\n", "full_output": "```patch\n--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -10,10 +10,10 @@\n     regex = r'^[\\w.@+-]+$'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n     )\n-    flags = re.ASCII\n+    flags = re.ASCII\n+    regex = r'\\A[\\w.@+-]+\\Z'\n \n \n @deconstructible\n class UnicodeUsernameValidator(validators.RegexValidator):\n     regex = r'^[\\w.@+-]+$'\n     message = _(\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\n     )\n-    flags = 0\n+    flags = 0\n+    regex = r'\\A[\\w.@+-]+\\Z'\n \n ```", "model_patch": "--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -10,10 +10,10 @@\n     regex = r'^[\\w.@+-]+$'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n     )\n-    flags = re.ASCII\n+    flags = re.ASCII\n+    regex = r'\\A[\\w.@+-]+\\Z'\n \n \n @deconstructible\n class UnicodeUsernameValidator(validators.RegexValidator):\n     regex = r'^[\\w.@+-]+$'\n     message = _(\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\n     )\n-    flags = 0\n+    flags = 0\n+    regex = r'\\A[\\w.@+-]+\\Z'\n \n "}
{"instance_id": "django__django-12286", "model_name_or_path": "concrete", "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\ntranslation.E004 shouldn't be raised on sublanguages when a base language is available.\nDescription\n\t\nAccording to Django documentation:\nIf a base language is available but the sublanguage specified is not, Django uses the base language. For example, if a user specifies de-at (Austrian German) but Django only has de available, Django uses de.\nHowever, when using Django 3.0.2, if my settings.py has\nLANGUAGE_CODE = \"de-at\"\nI get this error message:\nSystemCheckError: System check identified some issues:\nERRORS:\n?: (translation.E004) You have provided a value for the LANGUAGE_CODE setting that is not in the LANGUAGES setting.\nIf using\nLANGUAGE_CODE = \"es-ar\"\nDjango works fine (es-ar is one of the translations provided out of the box).\n\n</issue>\n<code>\n[start of README.rst]\n1 ======\n2 Django\n3 ======\n4 \n5 Django is a high-level Python Web framework that encourages rapid development\n6 and clean, pragmatic design. Thanks for checking it out.\n7 \n8 All documentation is in the \"``docs``\" directory and online at\n9 https://docs.djangoproject.com/en/stable/. If you're just getting started,\n10 here's how we recommend you read the docs:\n11 \n12 * First, read ``docs/intro/install.txt`` for instructions on installing Django.\n13 \n14 * Next, work through the tutorials in order (``docs/intro/tutorial01.txt``,\n15   ``docs/intro/tutorial02.txt``, etc.).\n16 \n17 * If you want to set up an actual deployment server, read\n18   ``docs/howto/deployment/index.txt`` for instructions.\n19 \n20 * You'll probably want to read through the topical guides (in ``docs/topics``)\n21   next; from there you can jump to the HOWTOs (in ``docs/howto``) for specific\n22   problems, and check out the reference (``docs/ref``) for gory details.\n23 \n24 * See ``docs/README`` for instructions on building an HTML version of the docs.\n25 \n26 Docs are updated rigorously. If you find any problems in the docs, or think\n27 they should be clarified in any way, please take 30 seconds to fill out a\n28 ticket here: https://code.djangoproject.com/newticket\n29 \n30 To get more help:\n31 \n32 * Join the ``#django`` channel on irc.freenode.net. Lots of helpful people hang\n33   out there. See https://en.wikipedia.org/wiki/Wikipedia:IRC/Tutorial if you're\n34   new to IRC.\n35 \n36 * Join the django-users mailing list, or read the archives, at\n37   https://groups.google.com/group/django-users.\n38 \n39 To contribute to Django:\n40 \n41 * Check out https://docs.djangoproject.com/en/dev/internals/contributing/ for\n42   information about getting involved.\n43 \n44 To run Django's test suite:\n45 \n46 * Follow the instructions in the \"Unit tests\" section of\n47   ``docs/internals/contributing/writing-code/unit-tests.txt``, published online at\n48   https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/unit-tests/#running-the-unit-tests\n49 \n[end of README.rst]\n[start of django/core/checks/translation.py]\n1 from django.conf import settings\n2 from django.utils.translation.trans_real import language_code_re\n3 \n4 from . import Error, Tags, register\n5 \n6 E001 = Error(\n7     'You have provided an invalid value for the LANGUAGE_CODE setting: {!r}.',\n8     id='translation.E001',\n9 )\n10 \n11 E002 = Error(\n12     'You have provided an invalid language code in the LANGUAGES setting: {!r}.',\n13     id='translation.E002',\n14 )\n15 \n16 E003 = Error(\n17     'You have provided an invalid language code in the LANGUAGES_BIDI setting: {!r}.',\n18     id='translation.E003',\n19 )\n20 \n21 E004 = Error(\n22     'You have provided a value for the LANGUAGE_CODE setting that is not in '\n23     'the LANGUAGES setting.',\n24     id='translation.E004',\n25 )\n26 \n27 \n28 @register(Tags.translation)\n29 def check_setting_language_code(app_configs, **kwargs):\n30     \"\"\"Error if LANGUAGE_CODE setting is invalid.\"\"\"\n31     tag = settings.LANGUAGE_CODE\n32     if not isinstance(tag, str) or not language_code_re.match(tag):\n33         return [Error(E001.msg.format(tag), id=E001.id)]\n34     return []\n35 \n36 \n37 @register(Tags.translation)\n38 def check_setting_languages(app_configs, **kwargs):\n39     \"\"\"Error if LANGUAGES setting is invalid.\"\"\"\n40     return [\n41         Error(E002.msg.format(tag), id=E002.id)\n42         for tag, _ in settings.LANGUAGES if not isinstance(tag, str) or not language_code_re.match(tag)\n43     ]\n44 \n45 \n46 @register(Tags.translation)\n47 def check_setting_languages_bidi(app_configs, **kwargs):\n48     \"\"\"Error if LANGUAGES_BIDI setting is invalid.\"\"\"\n49     return [\n50         Error(E003.msg.format(tag), id=E003.id)\n51         for tag in settings.LANGUAGES_BIDI if not isinstance(tag, str) or not language_code_re.match(tag)\n52     ]\n53 \n54 \n55 @register(Tags.translation)\n56 def check_language_settings_consistent(app_configs, **kwargs):\n57     \"\"\"Error if language settings are not consistent with each other.\"\"\"\n58     available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n59     if settings.LANGUAGE_CODE not in available_tags:\n60         return [E004]\n61     return []\n62 \n[end of django/core/checks/translation.py]\n</code>\nI need you to solve this issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the following format.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\n\n\n", "full_output": "<patch>\n--- a/django/core/checks/translation.py\n+++ b/django/core/checks/translation.py\n@@ -55,7 +55,12 @@\n     available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n     if settings.LANGUAGE_CODE not in available_tags:\n         return [E004]\n-    return []\n+    # Check if a base language is available for the sublanguage\n+    base_language = settings.LANGUAGE_CODE.split('-')[0]\n+    if base_language in available_tags:\n+        return []\n+    return []\n \n </patch>", "model_patch": "\n--- a/django/core/checks/translation.py\n+++ b/django/core/checks/translation.py\n@@ -55,7 +55,12 @@\n     available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n     if settings.LANGUAGE_CODE not in available_tags:\n         return [E004]\n-    return []\n+    # Check if a base language is available for the sublanguage\n+    base_language = settings.LANGUAGE_CODE.split('-')[0]\n+    if base_language in available_tags:\n+        return []\n+    return []\n \n "}
{"instance_id": "django__django-15388", "model_name_or_path": "concrete", "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nDev Server fails to restart after adding BASE_DIR to TEMPLATES[0]['DIRS'] in settings\nDescription\n\t\nRepro steps:\n$ pip install -U django\n$ django-admin startproject <name>\nOpen settings.py, copy the BASE_DIR variable from line 16 and paste it into the empty DIRS list on line 57\n$ ./manage.py runserver\nBack in your IDE, save a file and watch the dev server *NOT* restart.\nBack in settings.py, remove BASE_DIR from the templates DIRS list. Manually CTRL-C your dev server (as it won't restart on its own when you save), restart the dev server. Now return to your settings.py file, re-save it, and notice the development server once again detects changes and restarts.\nThis bug prevents the dev server from restarting no matter where you make changes - it is not just scoped to edits to settings.py.\n\n</issue>\n<code>\n[start of README.rst]\n1 ======\n2 Django\n3 ======\n4 \n5 Django is a high-level Python web framework that encourages rapid development\n6 and clean, pragmatic design. Thanks for checking it out.\n7 \n8 All documentation is in the \"``docs``\" directory and online at\n9 https://docs.djangoproject.com/en/stable/. If you're just getting started,\n10 here's how we recommend you read the docs:\n11 \n12 * First, read ``docs/intro/install.txt`` for instructions on installing Django.\n13 \n14 * Next, work through the tutorials in order (``docs/intro/tutorial01.txt``,\n15   ``docs/intro/tutorial02.txt``, etc.).\n16 \n17 * If you want to set up an actual deployment server, read\n18   ``docs/howto/deployment/index.txt`` for instructions.\n19 \n20 * You'll probably want to read through the topical guides (in ``docs/topics``)\n21   next; from there you can jump to the HOWTOs (in ``docs/howto``) for specific\n22   problems, and check out the reference (``docs/ref``) for gory details.\n23 \n24 * See ``docs/README`` for instructions on building an HTML version of the docs.\n25 \n26 Docs are updated rigorously. If you find any problems in the docs, or think\n27 they should be clarified in any way, please take 30 seconds to fill out a\n28 ticket here: https://code.djangoproject.com/newticket\n29 \n30 To get more help:\n31 \n32 * Join the ``#django`` channel on ``irc.libera.chat``. Lots of helpful people\n33   hang out there. See https://web.libera.chat if you're new to IRC.\n34 \n35 * Join the django-users mailing list, or read the archives, at\n36   https://groups.google.com/group/django-users.\n37 \n38 To contribute to Django:\n39 \n40 * Check out https://docs.djangoproject.com/en/dev/internals/contributing/ for\n41   information about getting involved.\n42 \n43 To run Django's test suite:\n44 \n45 * Follow the instructions in the \"Unit tests\" section of\n46   ``docs/internals/contributing/writing-code/unit-tests.txt``, published online at\n47   https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/unit-tests/#running-the-unit-tests\n48 \n49 Supporting the Development of Django\n50 ====================================\n51 \n52 Django's development depends on your contributions. \n53 \n54 If you depend on Django, remember to support the Django Software Foundation: https://www.djangoproject.com/fundraising/\n55 \n[end of README.rst]\n[start of django/template/autoreload.py]\n1 from pathlib import Path\n2 \n3 from django.dispatch import receiver\n4 from django.template import engines\n5 from django.template.backends.django import DjangoTemplates\n6 from django.utils._os import to_path\n7 from django.utils.autoreload import (\n8     autoreload_started, file_changed, is_django_path,\n9 )\n10 \n11 \n12 def get_template_directories():\n13     # Iterate through each template backend and find\n14     # any template_loader that has a 'get_dirs' method.\n15     # Collect the directories, filtering out Django templates.\n16     cwd = Path.cwd()\n17     items = set()\n18     for backend in engines.all():\n19         if not isinstance(backend, DjangoTemplates):\n20             continue\n21 \n22         items.update(cwd / to_path(dir) for dir in backend.engine.dirs)\n23 \n24         for loader in backend.engine.template_loaders:\n25             if not hasattr(loader, 'get_dirs'):\n26                 continue\n27             items.update(\n28                 cwd / to_path(directory)\n29                 for directory in loader.get_dirs()\n30                 if not is_django_path(directory)\n31             )\n32     return items\n33 \n34 \n35 def reset_loaders():\n36     for backend in engines.all():\n37         if not isinstance(backend, DjangoTemplates):\n38             continue\n39         for loader in backend.engine.template_loaders:\n40             loader.reset()\n41 \n42 \n43 @receiver(autoreload_started, dispatch_uid='template_loaders_watch_changes')\n44 def watch_for_template_changes(sender, **kwargs):\n45     for directory in get_template_directories():\n46         sender.watch_dir(directory, '**/*')\n47 \n48 \n49 @receiver(file_changed, dispatch_uid='template_loaders_file_changed')\n50 def template_changed(sender, file_path, **kwargs):\n51     for template_dir in get_template_directories():\n52         if template_dir in file_path.parents:\n53             reset_loaders()\n54             return True\n55 \n[end of django/template/autoreload.py]\n</code>\nI need you to solve this issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the following format.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\n\n\n", "full_output": "```patch\n--- a/django/template/autoreload.py\n+++ b/django/template/autoreload.py\n@@ -1,6 +1,7 @@\n from pathlib import Path\n \n from django.dispatch import receiver\n from django.template import engines\n from django.template.backends.django import DjangoTemplates\n+from django.utils.autoreload import autoreload_started, file_changed, is_django_path\n \n def get_template_directories():\n     # Iterate through each template backend and find\n     # any template_loader that has a 'get_dirs' method.\n@@ -35,7 +36,7 @@\n \n @receiver(autoreload_started, dispatch_uid='template_loaders_watch_changes')\n def watch_for_template_changes(sender, **kwargs):\n     for directory in get_template_directories():\n-        sender.watch_dir(directory, '**/*')\n+        sender.watch_dir(directory)\n \n @receiver(file_changed, dispatch_uid='template_loaders_file_changed')\n def template_changed(sender, file_path, **kwargs):\n     for template_dir in get_template_directories():\n```", "model_patch": "--- a/django/template/autoreload.py\n+++ b/django/template/autoreload.py\n@@ -1,6 +1,7 @@\n from pathlib import Path\n \n from django.dispatch import receiver\n from django.template import engines\n from django.template.backends.django import DjangoTemplates\n+from django.utils.autoreload import autoreload_started, file_changed, is_django_path\n \n def get_template_directories():\n     # Iterate through each template backend and find\n     # any template_loader that has a 'get_dirs' method.\n@@ -35,7 +36,7 @@\n \n @receiver(autoreload_started, dispatch_uid='template_loaders_watch_changes')\n def watch_for_template_changes(sender, **kwargs):\n     for directory in get_template_directories():\n-        sender.watch_dir(directory, '**/*')\n+        sender.watch_dir(directory)\n \n @receiver(file_changed, dispatch_uid='template_loaders_file_changed')\n def template_changed(sender, file_path, **kwargs):\n     for template_dir in get_template_directories():\n"}
{"instance_id": "django__django-15851", "model_name_or_path": "concrete", "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\ndbshell additional parameters should be passed before dbname on PostgreSQL.\nDescription\n\t\npsql expects all options to proceed the database name, if provided. So, if doing something like `./manage.py dbshell -- -c \"select * from some_table;\" one will get this:\n$ ./manage.py dbshell -- -c \"select * from some_table;\"\npsql: warning: extra command-line argument \"-c\" ignored\npsql: warning: extra command-line argument \"select * from some_table;\" ignored\npsql (10.21)\nType \"help\" for help.\nsome_database=>\nIt appears the args list just need to be constructed in the proper order, leaving the database name for the end of the args list.\n\n</issue>\n<code>\n[start of README.rst]\n1 ======\n2 Django\n3 ======\n4 \n5 Django is a high-level Python web framework that encourages rapid development\n6 and clean, pragmatic design. Thanks for checking it out.\n7 \n8 All documentation is in the \"``docs``\" directory and online at\n9 https://docs.djangoproject.com/en/stable/. If you're just getting started,\n10 here's how we recommend you read the docs:\n11 \n12 * First, read ``docs/intro/install.txt`` for instructions on installing Django.\n13 \n14 * Next, work through the tutorials in order (``docs/intro/tutorial01.txt``,\n15   ``docs/intro/tutorial02.txt``, etc.).\n16 \n17 * If you want to set up an actual deployment server, read\n18   ``docs/howto/deployment/index.txt`` for instructions.\n19 \n20 * You'll probably want to read through the topical guides (in ``docs/topics``)\n21   next; from there you can jump to the HOWTOs (in ``docs/howto``) for specific\n22   problems, and check out the reference (``docs/ref``) for gory details.\n23 \n24 * See ``docs/README`` for instructions on building an HTML version of the docs.\n25 \n26 Docs are updated rigorously. If you find any problems in the docs, or think\n27 they should be clarified in any way, please take 30 seconds to fill out a\n28 ticket here: https://code.djangoproject.com/newticket\n29 \n30 To get more help:\n31 \n32 * Join the ``#django`` channel on ``irc.libera.chat``. Lots of helpful people\n33   hang out there. See https://web.libera.chat if you're new to IRC.\n34 \n35 * Join the django-users mailing list, or read the archives, at\n36   https://groups.google.com/group/django-users.\n37 \n38 To contribute to Django:\n39 \n40 * Check out https://docs.djangoproject.com/en/dev/internals/contributing/ for\n41   information about getting involved.\n42 \n43 To run Django's test suite:\n44 \n45 * Follow the instructions in the \"Unit tests\" section of\n46   ``docs/internals/contributing/writing-code/unit-tests.txt``, published online at\n47   https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/unit-tests/#running-the-unit-tests\n48 \n49 Supporting the Development of Django\n50 ====================================\n51 \n52 Django's development depends on your contributions. \n53 \n54 If you depend on Django, remember to support the Django Software Foundation: https://www.djangoproject.com/fundraising/\n55 \n[end of README.rst]\n[start of django/db/backends/postgresql/client.py]\n1 import signal\n2 \n3 from django.db.backends.base.client import BaseDatabaseClient\n4 \n5 \n6 class DatabaseClient(BaseDatabaseClient):\n7     executable_name = \"psql\"\n8 \n9     @classmethod\n10     def settings_to_cmd_args_env(cls, settings_dict, parameters):\n11         args = [cls.executable_name]\n12         options = settings_dict.get(\"OPTIONS\", {})\n13 \n14         host = settings_dict.get(\"HOST\")\n15         port = settings_dict.get(\"PORT\")\n16         dbname = settings_dict.get(\"NAME\")\n17         user = settings_dict.get(\"USER\")\n18         passwd = settings_dict.get(\"PASSWORD\")\n19         passfile = options.get(\"passfile\")\n20         service = options.get(\"service\")\n21         sslmode = options.get(\"sslmode\")\n22         sslrootcert = options.get(\"sslrootcert\")\n23         sslcert = options.get(\"sslcert\")\n24         sslkey = options.get(\"sslkey\")\n25 \n26         if not dbname and not service:\n27             # Connect to the default 'postgres' db.\n28             dbname = \"postgres\"\n29         if user:\n30             args += [\"-U\", user]\n31         if host:\n32             args += [\"-h\", host]\n33         if port:\n34             args += [\"-p\", str(port)]\n35         if dbname:\n36             args += [dbname]\n37         args.extend(parameters)\n38 \n39         env = {}\n40         if passwd:\n41             env[\"PGPASSWORD\"] = str(passwd)\n42         if service:\n43             env[\"PGSERVICE\"] = str(service)\n44         if sslmode:\n45             env[\"PGSSLMODE\"] = str(sslmode)\n46         if sslrootcert:\n47             env[\"PGSSLROOTCERT\"] = str(sslrootcert)\n48         if sslcert:\n49             env[\"PGSSLCERT\"] = str(sslcert)\n50         if sslkey:\n51             env[\"PGSSLKEY\"] = str(sslkey)\n52         if passfile:\n53             env[\"PGPASSFILE\"] = str(passfile)\n54         return args, (env or None)\n55 \n56     def runshell(self, parameters):\n57         sigint_handler = signal.getsignal(signal.SIGINT)\n58         try:\n59             # Allow SIGINT to pass to psql to abort queries.\n60             signal.signal(signal.SIGINT, signal.SIG_IGN)\n61             super().runshell(parameters)\n62         finally:\n63             # Restore the original SIGINT handler.\n64             signal.signal(signal.SIGINT, sigint_handler)\n65 \n[end of django/db/backends/postgresql/client.py]\n</code>\nI need you to solve this issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the following format.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\n\n\n", "full_output": "```patch\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -26,7 +26,7 @@\n         if not dbname and not service:\n             # Connect to the default 'postgres' db.\n             dbname = \"postgres\"\n-        if user:\n+        if host:\n             args += [\"-U\", user]\n         if host:\n             args += [\"-h\", host]\n@@ -35,7 +35,7 @@\n         if dbname:\n-            args += [dbname]\n+            args += [dbname] + parameters\n         args.extend(parameters)\n \n         env = {}\n```", "model_patch": "--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -26,7 +26,7 @@\n         if not dbname and not service:\n             # Connect to the default 'postgres' db.\n             dbname = \"postgres\"\n-        if user:\n+        if host:\n             args += [\"-U\", user]\n         if host:\n             args += [\"-h\", host]\n@@ -35,7 +35,7 @@\n         if dbname:\n-            args += [dbname]\n+            args += [dbname] + parameters\n         args.extend(parameters)\n \n         env = {}\n"}
{"instance_id": "django__django-15790", "model_name_or_path": "concrete", "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\ncheck_for_template_tags_with_the_same_name with libraries in TEMPLATES\nDescription\n\t\nI didn't explore this thoroughly, but I think there might be an issue with the check_for_template_tags_with_the_same_name when you add a template tag library into TEMPLATES['OPTIONS']['librairies'].\nI'm getting an error like: \n(templates.E003) 'my_tags' is used for multiple template tag modules: 'someapp.templatetags.my_tags', 'someapp.templatetags.my_tags'\n\n</issue>\n<code>\n[start of README.rst]\n1 ======\n2 Django\n3 ======\n4 \n5 Django is a high-level Python web framework that encourages rapid development\n6 and clean, pragmatic design. Thanks for checking it out.\n7 \n8 All documentation is in the \"``docs``\" directory and online at\n9 https://docs.djangoproject.com/en/stable/. If you're just getting started,\n10 here's how we recommend you read the docs:\n11 \n12 * First, read ``docs/intro/install.txt`` for instructions on installing Django.\n13 \n14 * Next, work through the tutorials in order (``docs/intro/tutorial01.txt``,\n15   ``docs/intro/tutorial02.txt``, etc.).\n16 \n17 * If you want to set up an actual deployment server, read\n18   ``docs/howto/deployment/index.txt`` for instructions.\n19 \n20 * You'll probably want to read through the topical guides (in ``docs/topics``)\n21   next; from there you can jump to the HOWTOs (in ``docs/howto``) for specific\n22   problems, and check out the reference (``docs/ref``) for gory details.\n23 \n24 * See ``docs/README`` for instructions on building an HTML version of the docs.\n25 \n26 Docs are updated rigorously. If you find any problems in the docs, or think\n27 they should be clarified in any way, please take 30 seconds to fill out a\n28 ticket here: https://code.djangoproject.com/newticket\n29 \n30 To get more help:\n31 \n32 * Join the ``#django`` channel on ``irc.libera.chat``. Lots of helpful people\n33   hang out there. See https://web.libera.chat if you're new to IRC.\n34 \n35 * Join the django-users mailing list, or read the archives, at\n36   https://groups.google.com/group/django-users.\n37 \n38 To contribute to Django:\n39 \n40 * Check out https://docs.djangoproject.com/en/dev/internals/contributing/ for\n41   information about getting involved.\n42 \n43 To run Django's test suite:\n44 \n45 * Follow the instructions in the \"Unit tests\" section of\n46   ``docs/internals/contributing/writing-code/unit-tests.txt``, published online at\n47   https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/unit-tests/#running-the-unit-tests\n48 \n49 Supporting the Development of Django\n50 ====================================\n51 \n52 Django's development depends on your contributions. \n53 \n54 If you depend on Django, remember to support the Django Software Foundation: https://www.djangoproject.com/fundraising/\n55 \n[end of README.rst]\n[start of django/core/checks/templates.py]\n1 import copy\n2 from collections import defaultdict\n3 \n4 from django.conf import settings\n5 from django.template.backends.django import get_template_tag_modules\n6 \n7 from . import Error, Tags, register\n8 \n9 E001 = Error(\n10     \"You have 'APP_DIRS': True in your TEMPLATES but also specify 'loaders' \"\n11     \"in OPTIONS. Either remove APP_DIRS or remove the 'loaders' option.\",\n12     id=\"templates.E001\",\n13 )\n14 E002 = Error(\n15     \"'string_if_invalid' in TEMPLATES OPTIONS must be a string but got: {} ({}).\",\n16     id=\"templates.E002\",\n17 )\n18 E003 = Error(\n19     \"{} is used for multiple template tag modules: {}\",\n20     id=\"templates.E003\",\n21 )\n22 \n23 \n24 @register(Tags.templates)\n25 def check_setting_app_dirs_loaders(app_configs, **kwargs):\n26     return (\n27         [E001]\n28         if any(\n29             conf.get(\"APP_DIRS\") and \"loaders\" in conf.get(\"OPTIONS\", {})\n30             for conf in settings.TEMPLATES\n31         )\n32         else []\n33     )\n34 \n35 \n36 @register(Tags.templates)\n37 def check_string_if_invalid_is_string(app_configs, **kwargs):\n38     errors = []\n39     for conf in settings.TEMPLATES:\n40         string_if_invalid = conf.get(\"OPTIONS\", {}).get(\"string_if_invalid\", \"\")\n41         if not isinstance(string_if_invalid, str):\n42             error = copy.copy(E002)\n43             error.msg = error.msg.format(\n44                 string_if_invalid, type(string_if_invalid).__name__\n45             )\n46             errors.append(error)\n47     return errors\n48 \n49 \n50 @register(Tags.templates)\n51 def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n52     errors = []\n53     libraries = defaultdict(list)\n54 \n55     for conf in settings.TEMPLATES:\n56         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n57         for module_name, module_path in custom_libraries.items():\n58             libraries[module_name].append(module_path)\n59 \n60     for module_name, module_path in get_template_tag_modules():\n61         libraries[module_name].append(module_path)\n62 \n63     for library_name, items in libraries.items():\n64         if len(items) > 1:\n65             errors.append(\n66                 Error(\n67                     E003.msg.format(\n68                         repr(library_name),\n69                         \", \".join(repr(item) for item in items),\n70                     ),\n71                     id=E003.id,\n72                 )\n73             )\n74 \n75     return errors\n76 \n[end of django/core/checks/templates.py]\n</code>\nI need you to solve this issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the following format.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\n\n\n", "full_output": "--- a/django/core/checks/templates.py\\n+++ b/django/core/checks/templates.py\\n@@ -50,6 +50,7 @@\\n     errors = []\\n     libraries = defaultdict(list)\\n \\n     for conf in settings.TEMPLATES:\\n+        # Check for duplicate libraries in the configuration\\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\\n         for module_name, module_path in custom_libraries.items():\\n             libraries[module_name].append(module_path)\\n \\n     for module_name, module_path in get_template_tag_modules():\\n         libraries[module_name].append(module_path)\\n \\n     for library_name, items in libraries.items():\\n         if len(items) > 1:\\n             errors.append(\\n                 Error(\\n                     E003.msg.format(\\n                         repr(library_name),\\n                         \", \".join(repr(item) for item in items),\\n                     ),\\n                     id=E003.id,\\n                 )\\n             )\\n \\n+    # Return errors if any duplicate libraries were found\\n     return errors\\n", "model_patch": "--- a/django/core/checks/templates.py\\n+++ b/django/core/checks/templates.py\\n@@ -50,6 +50,7 @@\\n     errors = []\\n     libraries = defaultdict(list)\\n \\n     for conf in settings.TEMPLATES:\\n+        # Check for duplicate libraries in the configuration\\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\\n         for module_name, module_path in custom_libraries.items():\\n             libraries[module_name].append(module_path)\\n \\n     for module_name, module_path in get_template_tag_modules():\\n         libraries[module_name].append(module_path)\\n \\n     for library_name, items in libraries.items():\\n         if len(items) > 1:\\n             errors.append(\\n                 Error(\\n                     E003.msg.format(\\n                         repr(library_name),\\n                         \", \".join(repr(item) for item in items),\\n                     ),\\n                     id=E003.id,\\n                 )\\n             )\\n \\n+    # Return errors if any duplicate libraries were found\\n     return errors\\n"}
{"instance_id": "django__django-11283", "model_name_or_path": "concrete", "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nMigration auth.0011_update_proxy_permissions fails for models recreated as a proxy.\nDescription\n\t \n\t\t(last modified by Mariusz Felisiak)\n\t \nI am trying to update my project to Django 2.2. When I launch python manage.py migrate, I get this error message when migration auth.0011_update_proxy_permissions is applying (full stacktrace is available \u200bhere):\ndjango.db.utils.IntegrityError: duplicate key value violates unique constraint \"idx_18141_auth_permission_content_type_id_01ab375a_uniq\" DETAIL: Key (co.ntent_type_id, codename)=(12, add_agency) already exists.\nIt looks like the migration is trying to re-create already existing entries in the auth_permission table. At first I though it cloud because we recently renamed a model. But after digging and deleting the entries associated with the renamed model from our database in the auth_permission table, the problem still occurs with other proxy models.\nI tried to update directly from 2.0.13 and 2.1.8. The issues appeared each time. I also deleted my venv and recreated it without an effect.\nI searched for a ticket about this on the bug tracker but found nothing. I also posted this on \u200bdjango-users and was asked to report this here.\n\n</issue>\n<code>\n[start of README.rst]\n1 Django is a high-level Python Web framework that encourages rapid development\n2 and clean, pragmatic design. Thanks for checking it out.\n3 \n4 All documentation is in the \"``docs``\" directory and online at\n5 https://docs.djangoproject.com/en/stable/. If you're just getting started,\n6 here's how we recommend you read the docs:\n7 \n8 * First, read ``docs/intro/install.txt`` for instructions on installing Django.\n9 \n10 * Next, work through the tutorials in order (``docs/intro/tutorial01.txt``,\n11   ``docs/intro/tutorial02.txt``, etc.).\n12 \n13 * If you want to set up an actual deployment server, read\n14   ``docs/howto/deployment/index.txt`` for instructions.\n15 \n16 * You'll probably want to read through the topical guides (in ``docs/topics``)\n17   next; from there you can jump to the HOWTOs (in ``docs/howto``) for specific\n18   problems, and check out the reference (``docs/ref``) for gory details.\n19 \n20 * See ``docs/README`` for instructions on building an HTML version of the docs.\n21 \n22 Docs are updated rigorously. If you find any problems in the docs, or think\n23 they should be clarified in any way, please take 30 seconds to fill out a\n24 ticket here: https://code.djangoproject.com/newticket\n25 \n26 To get more help:\n27 \n28 * Join the ``#django`` channel on irc.freenode.net. Lots of helpful people hang\n29   out there. See https://en.wikipedia.org/wiki/Wikipedia:IRC/Tutorial if you're\n30   new to IRC.\n31 \n32 * Join the django-users mailing list, or read the archives, at\n33   https://groups.google.com/group/django-users.\n34 \n35 To contribute to Django:\n36 \n37 * Check out https://docs.djangoproject.com/en/dev/internals/contributing/ for\n38   information about getting involved.\n39 \n40 To run Django's test suite:\n41 \n42 * Follow the instructions in the \"Unit tests\" section of\n43   ``docs/internals/contributing/writing-code/unit-tests.txt``, published online at\n44   https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/unit-tests/#running-the-unit-tests\n45 \n[end of README.rst]\n[start of django/contrib/auth/migrations/0011_update_proxy_permissions.py]\n1 from django.db import migrations\n2 from django.db.models import Q\n3 \n4 \n5 def update_proxy_model_permissions(apps, schema_editor, reverse=False):\n6     \"\"\"\n7     Update the content_type of proxy model permissions to use the ContentType\n8     of the proxy model.\n9     \"\"\"\n10     Permission = apps.get_model('auth', 'Permission')\n11     ContentType = apps.get_model('contenttypes', 'ContentType')\n12     for Model in apps.get_models():\n13         opts = Model._meta\n14         if not opts.proxy:\n15             continue\n16         proxy_default_permissions_codenames = [\n17             '%s_%s' % (action, opts.model_name)\n18             for action in opts.default_permissions\n19         ]\n20         permissions_query = Q(codename__in=proxy_default_permissions_codenames)\n21         for codename, name in opts.permissions:\n22             permissions_query = permissions_query | Q(codename=codename, name=name)\n23         concrete_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=True)\n24         proxy_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=False)\n25         old_content_type = proxy_content_type if reverse else concrete_content_type\n26         new_content_type = concrete_content_type if reverse else proxy_content_type\n27         Permission.objects.filter(\n28             permissions_query,\n29             content_type=old_content_type,\n30         ).update(content_type=new_content_type)\n31 \n32 \n33 def revert_proxy_model_permissions(apps, schema_editor):\n34     \"\"\"\n35     Update the content_type of proxy model permissions to use the ContentType\n36     of the concrete model.\n37     \"\"\"\n38     update_proxy_model_permissions(apps, schema_editor, reverse=True)\n39 \n40 \n41 class Migration(migrations.Migration):\n42     dependencies = [\n43         ('auth', '0010_alter_group_name_max_length'),\n44         ('contenttypes', '0002_remove_content_type_name'),\n45     ]\n46     operations = [\n47         migrations.RunPython(update_proxy_model_permissions, revert_proxy_model_permissions),\n48     ]\n49 \n[end of django/contrib/auth/migrations/0011_update_proxy_permissions.py]\n</code>\nI need you to solve this issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the following format.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\n\n\n", "full_output": "```patch\n--- a/django/contrib/auth/migrations/0011_update_proxy_permissions.py\n+++ b/django/contrib/auth/migrations/0011_update_proxy_permissions.py\n@@ -1,6 +1,7 @@\n from django.db import migrations\n from django.db.models import Q\n \n \n def update_proxy_model_permissions(apps, schema_editor, reverse=False):\n+    seen_permissions = set()\n     \"\"\"\n     Update the content_type of proxy model permissions to use the ContentType\n     of the proxy model.\n@@ -20,6 +21,10 @@\n         for codename, name in opts.permissions:\n             permissions_query = permissions_query | Q(codename=codename, name=name)\n         concrete_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=True)\n         proxy_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=False)\n+        # Check for duplicates before updating\n+        existing_permissions = Permission.objects.filter(\n+            permissions_query,\n+            content_type=old_content_type\n+        ).values_list('codename', flat=True)\n         Permission.objects.filter(\n             permissions_query,\n             content_type=old_content_type,\n@@ -30,6 +35,7 @@\n         ).update(content_type=new_content_type)\n \n \n def revert_proxy_model_permissions(apps, schema_editor):\n     \"\"\"\n     Update the content_type of proxy model permissions to use the ContentType\n     of the concrete model.\n     \"\"\"\n     update_proxy_model_permissions(apps, schema_editor, reverse=True)\n \n \n class Migration(migrations.Migration):\n     dependencies = [\n         ('auth', '0010_alter_group_name_max_length'),\n         ('contenttypes', '0002_remove_content_type_name'),\n     ]\n     operations = [\n         migrations.RunPython(update_proxy_model_permissions, revert_proxy_model_permissions),\n     ]\n```", "model_patch": "--- a/django/contrib/auth/migrations/0011_update_proxy_permissions.py\n+++ b/django/contrib/auth/migrations/0011_update_proxy_permissions.py\n@@ -1,6 +1,7 @@\n from django.db import migrations\n from django.db.models import Q\n \n \n def update_proxy_model_permissions(apps, schema_editor, reverse=False):\n+    seen_permissions = set()\n     \"\"\"\n     Update the content_type of proxy model permissions to use the ContentType\n     of the proxy model.\n@@ -20,6 +21,10 @@\n         for codename, name in opts.permissions:\n             permissions_query = permissions_query | Q(codename=codename, name=name)\n         concrete_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=True)\n         proxy_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=False)\n+        # Check for duplicates before updating\n+        existing_permissions = Permission.objects.filter(\n+            permissions_query,\n+            content_type=old_content_type\n+        ).values_list('codename', flat=True)\n         Permission.objects.filter(\n             permissions_query,\n             content_type=old_content_type,\n@@ -30,6 +35,7 @@\n         ).update(content_type=new_content_type)\n \n \n def revert_proxy_model_permissions(apps, schema_editor):\n     \"\"\"\n     Update the content_type of proxy model permissions to use the ContentType\n     of the concrete model.\n     \"\"\"\n     update_proxy_model_permissions(apps, schema_editor, reverse=True)\n \n \n class Migration(migrations.Migration):\n     dependencies = [\n         ('auth', '0010_alter_group_name_max_length'),\n         ('contenttypes', '0002_remove_content_type_name'),\n     ]\n     operations = [\n         migrations.RunPython(update_proxy_model_permissions, revert_proxy_model_permissions),\n     ]\n"}
{"instance_id": "django__django-11039", "model_name_or_path": "concrete", "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nsqlmigrate wraps it's outpout in BEGIN/COMMIT even if the database doesn't support transactional DDL\nDescription\n\t \n\t\t(last modified by Simon Charette)\n\t \nThe migration executor only adds the outer BEGIN/COMMIT \u200bif the migration is atomic and \u200bthe schema editor can rollback DDL but the current sqlmigrate logic only takes migration.atomic into consideration.\nThe issue can be addressed by\nChanging sqlmigrate \u200bassignment of self.output_transaction to consider connection.features.can_rollback_ddl as well.\nAdding a test in tests/migrations/test_commands.py based on \u200ban existing test for non-atomic migrations that mocks connection.features.can_rollback_ddl to False instead of overdidding MIGRATION_MODULES to point to a non-atomic migration.\nI marked the ticket as easy picking because I included the above guidelines but feel free to uncheck it if you deem it inappropriate.\n\n</issue>\n<code>\n[start of README.rst]\n1 Django is a high-level Python Web framework that encourages rapid development\n2 and clean, pragmatic design. Thanks for checking it out.\n3 \n4 All documentation is in the \"``docs``\" directory and online at\n5 https://docs.djangoproject.com/en/stable/. If you're just getting started,\n6 here's how we recommend you read the docs:\n7 \n8 * First, read ``docs/intro/install.txt`` for instructions on installing Django.\n9 \n10 * Next, work through the tutorials in order (``docs/intro/tutorial01.txt``,\n11   ``docs/intro/tutorial02.txt``, etc.).\n12 \n13 * If you want to set up an actual deployment server, read\n14   ``docs/howto/deployment/index.txt`` for instructions.\n15 \n16 * You'll probably want to read through the topical guides (in ``docs/topics``)\n17   next; from there you can jump to the HOWTOs (in ``docs/howto``) for specific\n18   problems, and check out the reference (``docs/ref``) for gory details.\n19 \n20 * See ``docs/README`` for instructions on building an HTML version of the docs.\n21 \n22 Docs are updated rigorously. If you find any problems in the docs, or think\n23 they should be clarified in any way, please take 30 seconds to fill out a\n24 ticket here: https://code.djangoproject.com/newticket\n25 \n26 To get more help:\n27 \n28 * Join the ``#django`` channel on irc.freenode.net. Lots of helpful people hang\n29   out there. See https://en.wikipedia.org/wiki/Wikipedia:IRC/Tutorial if you're\n30   new to IRC.\n31 \n32 * Join the django-users mailing list, or read the archives, at\n33   https://groups.google.com/group/django-users.\n34 \n35 To contribute to Django:\n36 \n37 * Check out https://docs.djangoproject.com/en/dev/internals/contributing/ for\n38   information about getting involved.\n39 \n40 To run Django's test suite:\n41 \n42 * Follow the instructions in the \"Unit tests\" section of\n43   ``docs/internals/contributing/writing-code/unit-tests.txt``, published online at\n44   https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/unit-tests/#running-the-unit-tests\n45 \n[end of README.rst]\n[start of django/core/management/commands/sqlmigrate.py]\n1 from django.apps import apps\n2 from django.core.management.base import BaseCommand, CommandError\n3 from django.db import DEFAULT_DB_ALIAS, connections\n4 from django.db.migrations.executor import MigrationExecutor\n5 from django.db.migrations.loader import AmbiguityError\n6 \n7 \n8 class Command(BaseCommand):\n9     help = \"Prints the SQL statements for the named migration.\"\n10 \n11     output_transaction = True\n12 \n13     def add_arguments(self, parser):\n14         parser.add_argument('app_label', help='App label of the application containing the migration.')\n15         parser.add_argument('migration_name', help='Migration name to print the SQL for.')\n16         parser.add_argument(\n17             '--database', default=DEFAULT_DB_ALIAS,\n18             help='Nominates a database to create SQL for. Defaults to the \"default\" database.',\n19         )\n20         parser.add_argument(\n21             '--backwards', action='store_true',\n22             help='Creates SQL to unapply the migration, rather than to apply it',\n23         )\n24 \n25     def execute(self, *args, **options):\n26         # sqlmigrate doesn't support coloring its output but we need to force\n27         # no_color=True so that the BEGIN/COMMIT statements added by\n28         # output_transaction don't get colored either.\n29         options['no_color'] = True\n30         return super().execute(*args, **options)\n31 \n32     def handle(self, *args, **options):\n33         # Get the database we're operating from\n34         connection = connections[options['database']]\n35 \n36         # Load up an executor to get all the migration data\n37         executor = MigrationExecutor(connection)\n38 \n39         # Resolve command-line arguments into a migration\n40         app_label, migration_name = options['app_label'], options['migration_name']\n41         # Validate app_label\n42         try:\n43             apps.get_app_config(app_label)\n44         except LookupError as err:\n45             raise CommandError(str(err))\n46         if app_label not in executor.loader.migrated_apps:\n47             raise CommandError(\"App '%s' does not have migrations\" % app_label)\n48         try:\n49             migration = executor.loader.get_migration_by_prefix(app_label, migration_name)\n50         except AmbiguityError:\n51             raise CommandError(\"More than one migration matches '%s' in app '%s'. Please be more specific.\" % (\n52                 migration_name, app_label))\n53         except KeyError:\n54             raise CommandError(\"Cannot find a migration matching '%s' from app '%s'. Is it in INSTALLED_APPS?\" % (\n55                 migration_name, app_label))\n56         targets = [(app_label, migration.name)]\n57 \n58         # Show begin/end around output only for atomic migrations\n59         self.output_transaction = migration.atomic\n60 \n61         # Make a plan that represents just the requested migrations and show SQL\n62         # for it\n63         plan = [(executor.loader.graph.nodes[targets[0]], options['backwards'])]\n64         sql_statements = executor.collect_sql(plan)\n65         return '\\n'.join(sql_statements)\n66 \n[end of django/core/management/commands/sqlmigrate.py]\n</code>\nI need you to solve this issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the following format.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\n\n\n", "full_output": "```patch\n--- a/django/core/management/commands/sqlmigrate.py\n+++ b/django/core/management/commands/sqlmigrate.py\n@@ -59,7 +59,8 @@\n         # Show begin/end around output only for atomic migrations\n         self.output_transaction = migration.atomic\n \n+        # Check if the database can rollback DDL\n         self.output_transaction = self.output_transaction and connection.features.can_rollback_ddl\n \n         # Make a plan that represents just the requested migrations and show SQL\n         # for it\n```", "model_patch": "--- a/django/core/management/commands/sqlmigrate.py\n+++ b/django/core/management/commands/sqlmigrate.py\n@@ -59,7 +59,8 @@\n         # Show begin/end around output only for atomic migrations\n         self.output_transaction = migration.atomic\n \n+        # Check if the database can rollback DDL\n         self.output_transaction = self.output_transaction and connection.features.can_rollback_ddl\n \n         # Make a plan that represents just the requested migrations and show SQL\n         # for it\n"}
{"instance_id": "django__django-12915", "model_name_or_path": "concrete", "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nAdd get_response_async for ASGIStaticFilesHandler\nDescription\n\t\nIt looks like the StaticFilesHandlerMixin is missing the the async response function.\nWithout this, when trying to use the ASGIStaticFilesHandler, this is the traceback:\nException inside application: 'NoneType' object is not callable\nTraceback (most recent call last):\n File \".../lib/python3.7/site-packages/daphne/cli.py\", line 30, in asgi\n\tawait self.app(scope, receive, send)\n File \".../src/django/django/contrib/staticfiles/handlers.py\", line 86, in __call__\n\treturn await super().__call__(scope, receive, send)\n File \".../src/django/django/core/handlers/asgi.py\", line 161, in __call__\n\tresponse = await self.get_response_async(request)\n File \".../src/django/django/core/handlers/base.py\", line 148, in get_response_async\n\tresponse = await self._middleware_chain(request)\nTypeError: 'NoneType' object is not callable\n\n</issue>\n<code>\n[start of README.rst]\n1 ======\n2 Django\n3 ======\n4 \n5 Django is a high-level Python Web framework that encourages rapid development\n6 and clean, pragmatic design. Thanks for checking it out.\n7 \n8 All documentation is in the \"``docs``\" directory and online at\n9 https://docs.djangoproject.com/en/stable/. If you're just getting started,\n10 here's how we recommend you read the docs:\n11 \n12 * First, read ``docs/intro/install.txt`` for instructions on installing Django.\n13 \n14 * Next, work through the tutorials in order (``docs/intro/tutorial01.txt``,\n15   ``docs/intro/tutorial02.txt``, etc.).\n16 \n17 * If you want to set up an actual deployment server, read\n18   ``docs/howto/deployment/index.txt`` for instructions.\n19 \n20 * You'll probably want to read through the topical guides (in ``docs/topics``)\n21   next; from there you can jump to the HOWTOs (in ``docs/howto``) for specific\n22   problems, and check out the reference (``docs/ref``) for gory details.\n23 \n24 * See ``docs/README`` for instructions on building an HTML version of the docs.\n25 \n26 Docs are updated rigorously. If you find any problems in the docs, or think\n27 they should be clarified in any way, please take 30 seconds to fill out a\n28 ticket here: https://code.djangoproject.com/newticket\n29 \n30 To get more help:\n31 \n32 * Join the ``#django`` channel on irc.freenode.net. Lots of helpful people hang\n33   out there. See https://freenode.net/kb/answer/chat if you're new to IRC.\n34 \n35 * Join the django-users mailing list, or read the archives, at\n36   https://groups.google.com/group/django-users.\n37 \n38 To contribute to Django:\n39 \n40 * Check out https://docs.djangoproject.com/en/dev/internals/contributing/ for\n41   information about getting involved.\n42 \n43 To run Django's test suite:\n44 \n45 * Follow the instructions in the \"Unit tests\" section of\n46   ``docs/internals/contributing/writing-code/unit-tests.txt``, published online at\n47   https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/unit-tests/#running-the-unit-tests\n48 \n[end of README.rst]\n[start of django/contrib/staticfiles/handlers.py]\n1 from urllib.parse import urlparse\n2 from urllib.request import url2pathname\n3 \n4 from django.conf import settings\n5 from django.contrib.staticfiles import utils\n6 from django.contrib.staticfiles.views import serve\n7 from django.core.handlers.asgi import ASGIHandler\n8 from django.core.handlers.exception import response_for_exception\n9 from django.core.handlers.wsgi import WSGIHandler, get_path_info\n10 from django.http import Http404\n11 \n12 \n13 class StaticFilesHandlerMixin:\n14     \"\"\"\n15     Common methods used by WSGI and ASGI handlers.\n16     \"\"\"\n17     # May be used to differentiate between handler types (e.g. in a\n18     # request_finished signal)\n19     handles_files = True\n20 \n21     def load_middleware(self):\n22         # Middleware are already loaded for self.application; no need to reload\n23         # them for self.\n24         pass\n25 \n26     def get_base_url(self):\n27         utils.check_settings()\n28         return settings.STATIC_URL\n29 \n30     def _should_handle(self, path):\n31         \"\"\"\n32         Check if the path should be handled. Ignore the path if:\n33         * the host is provided as part of the base_url\n34         * the request's path isn't under the media path (or equal)\n35         \"\"\"\n36         return path.startswith(self.base_url[2]) and not self.base_url[1]\n37 \n38     def file_path(self, url):\n39         \"\"\"\n40         Return the relative path to the media file on disk for the given URL.\n41         \"\"\"\n42         relative_url = url[len(self.base_url[2]):]\n43         return url2pathname(relative_url)\n44 \n45     def serve(self, request):\n46         \"\"\"Serve the request path.\"\"\"\n47         return serve(request, self.file_path(request.path), insecure=True)\n48 \n49     def get_response(self, request):\n50         try:\n51             return self.serve(request)\n52         except Http404 as e:\n53             return response_for_exception(request, e)\n54 \n55 \n56 class StaticFilesHandler(StaticFilesHandlerMixin, WSGIHandler):\n57     \"\"\"\n58     WSGI middleware that intercepts calls to the static files directory, as\n59     defined by the STATIC_URL setting, and serves those files.\n60     \"\"\"\n61     def __init__(self, application):\n62         self.application = application\n63         self.base_url = urlparse(self.get_base_url())\n64         super().__init__()\n65 \n66     def __call__(self, environ, start_response):\n67         if not self._should_handle(get_path_info(environ)):\n68             return self.application(environ, start_response)\n69         return super().__call__(environ, start_response)\n70 \n71 \n72 class ASGIStaticFilesHandler(StaticFilesHandlerMixin, ASGIHandler):\n73     \"\"\"\n74     ASGI application which wraps another and intercepts requests for static\n75     files, passing them off to Django's static file serving.\n76     \"\"\"\n77     def __init__(self, application):\n78         self.application = application\n79         self.base_url = urlparse(self.get_base_url())\n80 \n81     async def __call__(self, scope, receive, send):\n82         # Only even look at HTTP requests\n83         if scope['type'] == 'http' and self._should_handle(scope['path']):\n84             # Serve static content\n85             # (the one thing super() doesn't do is __call__, apparently)\n86             return await super().__call__(scope, receive, send)\n87         # Hand off to the main app\n88         return await self.application(scope, receive, send)\n89 \n[end of django/contrib/staticfiles/handlers.py]\n</code>\nI need you to solve this issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the following format.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\n\n\n", "full_output": "```patch\n--- a/django/contrib/staticfiles/handlers.py\n+++ b/django/contrib/staticfiles/handlers.py\n@@ -49,6 +49,20 @@\n             return response_for_exception(request, e)\n \n \n class StaticFilesHandler(StaticFilesHandlerMixin, WSGIHandler):\n     \"\"\"\n+    WSGI middleware that intercepts calls to the static files directory, as\n+    defined by the STATIC_URL setting, and serves those files.\n+    \"\"\"\n+    def __init__(self, application):\n+        self.application = application\n+        self.base_url = urlparse(self.get_base_url())\n+        super().__init__()\n+\n+    async def get_response_async(self, request):\n+        try:\n+            return await self.serve(request)\n+        except Http404 as e:\n+            return response_for_exception(request, e)\n+\n     def __call__(self, environ, start_response):\n         if not self._should_handle(get_path_info(environ)):\n             return self.application(environ, start_response)\n@@ -72,6 +86,20 @@\n     async def __call__(self, scope, receive, send):\n         # Only even look at HTTP requests\n         if scope['type'] == 'http' and self._should_handle(scope['path']):\n+            # Serve static content\n+            request = scope['path']  # You may need to adapt this to create a request object\n+            response = await self.get_response_async(request)\n+            await send(response)\n+            return\n             # (the one thing super() doesn't do is __call__, apparently)\n             return await super().__call__(scope, receive, send)\n         # Hand off to the main app\n         return await self.application(scope, receive, send)\n```", "model_patch": "--- a/django/contrib/staticfiles/handlers.py\n+++ b/django/contrib/staticfiles/handlers.py\n@@ -49,6 +49,20 @@\n             return response_for_exception(request, e)\n \n \n class StaticFilesHandler(StaticFilesHandlerMixin, WSGIHandler):\n     \"\"\"\n+    WSGI middleware that intercepts calls to the static files directory, as\n+    defined by the STATIC_URL setting, and serves those files.\n+    \"\"\"\n+    def __init__(self, application):\n+        self.application = application\n+        self.base_url = urlparse(self.get_base_url())\n+        super().__init__()\n+\n+    async def get_response_async(self, request):\n+        try:\n+            return await self.serve(request)\n+        except Http404 as e:\n+            return response_for_exception(request, e)\n+\n     def __call__(self, environ, start_response):\n         if not self._should_handle(get_path_info(environ)):\n             return self.application(environ, start_response)\n@@ -72,6 +86,20 @@\n     async def __call__(self, scope, receive, send):\n         # Only even look at HTTP requests\n         if scope['type'] == 'http' and self._should_handle(scope['path']):\n+            # Serve static content\n+            request = scope['path']  # You may need to adapt this to create a request object\n+            response = await self.get_response_async(request)\n+            await send(response)\n+            return\n             # (the one thing super() doesn't do is __call__, apparently)\n             return await super().__call__(scope, receive, send)\n         # Hand off to the main app\n         return await self.application(scope, receive, send)\n"}
{"instance_id": "django__django-16046", "model_name_or_path": "concrete", "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nFix numberformat.py \"string index out of range\" when null\nDescription\n\t\nWhen:\nif str_number[0] == \"-\"\nencounters a number field that's null when formatting for the admin list_display this causes an \nIndexError: string index out of range\nI can attach the proposed fix here, or open a pull request on GitHub if you like?\n\n</issue>\n<code>\n[start of README.rst]\n1 ======\n2 Django\n3 ======\n4 \n5 Django is a high-level Python web framework that encourages rapid development\n6 and clean, pragmatic design. Thanks for checking it out.\n7 \n8 All documentation is in the \"``docs``\" directory and online at\n9 https://docs.djangoproject.com/en/stable/. If you're just getting started,\n10 here's how we recommend you read the docs:\n11 \n12 * First, read ``docs/intro/install.txt`` for instructions on installing Django.\n13 \n14 * Next, work through the tutorials in order (``docs/intro/tutorial01.txt``,\n15   ``docs/intro/tutorial02.txt``, etc.).\n16 \n17 * If you want to set up an actual deployment server, read\n18   ``docs/howto/deployment/index.txt`` for instructions.\n19 \n20 * You'll probably want to read through the topical guides (in ``docs/topics``)\n21   next; from there you can jump to the HOWTOs (in ``docs/howto``) for specific\n22   problems, and check out the reference (``docs/ref``) for gory details.\n23 \n24 * See ``docs/README`` for instructions on building an HTML version of the docs.\n25 \n26 Docs are updated rigorously. If you find any problems in the docs, or think\n27 they should be clarified in any way, please take 30 seconds to fill out a\n28 ticket here: https://code.djangoproject.com/newticket\n29 \n30 To get more help:\n31 \n32 * Join the ``#django`` channel on ``irc.libera.chat``. Lots of helpful people\n33   hang out there. See https://web.libera.chat if you're new to IRC.\n34 \n35 * Join the django-users mailing list, or read the archives, at\n36   https://groups.google.com/group/django-users.\n37 \n38 To contribute to Django:\n39 \n40 * Check out https://docs.djangoproject.com/en/dev/internals/contributing/ for\n41   information about getting involved.\n42 \n43 To run Django's test suite:\n44 \n45 * Follow the instructions in the \"Unit tests\" section of\n46   ``docs/internals/contributing/writing-code/unit-tests.txt``, published online at\n47   https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/unit-tests/#running-the-unit-tests\n48 \n49 Supporting the Development of Django\n50 ====================================\n51 \n52 Django's development depends on your contributions. \n53 \n54 If you depend on Django, remember to support the Django Software Foundation: https://www.djangoproject.com/fundraising/\n55 \n[end of README.rst]\n[start of django/utils/numberformat.py]\n1 from decimal import Decimal\n2 \n3 from django.conf import settings\n4 from django.utils.safestring import mark_safe\n5 \n6 \n7 def format(\n8     number,\n9     decimal_sep,\n10     decimal_pos=None,\n11     grouping=0,\n12     thousand_sep=\"\",\n13     force_grouping=False,\n14     use_l10n=None,\n15 ):\n16     \"\"\"\n17     Get a number (as a number or string), and return it as a string,\n18     using formats defined as arguments:\n19 \n20     * decimal_sep: Decimal separator symbol (for example \".\")\n21     * decimal_pos: Number of decimal positions\n22     * grouping: Number of digits in every group limited by thousand separator.\n23         For non-uniform digit grouping, it can be a sequence with the number\n24         of digit group sizes following the format used by the Python locale\n25         module in locale.localeconv() LC_NUMERIC grouping (e.g. (3, 2, 0)).\n26     * thousand_sep: Thousand separator symbol (for example \",\")\n27     \"\"\"\n28     use_grouping = (\n29         use_l10n or (use_l10n is None and settings.USE_L10N)\n30     ) and settings.USE_THOUSAND_SEPARATOR\n31     use_grouping = use_grouping or force_grouping\n32     use_grouping = use_grouping and grouping != 0\n33     # Make the common case fast\n34     if isinstance(number, int) and not use_grouping and not decimal_pos:\n35         return mark_safe(number)\n36     # sign\n37     sign = \"\"\n38     # Treat potentially very large/small floats as Decimals.\n39     if isinstance(number, float) and \"e\" in str(number).lower():\n40         number = Decimal(str(number))\n41     if isinstance(number, Decimal):\n42 \n43         if decimal_pos is not None:\n44             # If the provided number is too small to affect any of the visible\n45             # decimal places, consider it equal to '0'.\n46             cutoff = Decimal(\"0.\" + \"1\".rjust(decimal_pos, \"0\"))\n47             if abs(number) < cutoff:\n48                 number = Decimal(\"0\")\n49 \n50         # Format values with more than 200 digits (an arbitrary cutoff) using\n51         # scientific notation to avoid high memory usage in {:f}'.format().\n52         _, digits, exponent = number.as_tuple()\n53         if abs(exponent) + len(digits) > 200:\n54             number = \"{:e}\".format(number)\n55             coefficient, exponent = number.split(\"e\")\n56             # Format the coefficient.\n57             coefficient = format(\n58                 coefficient,\n59                 decimal_sep,\n60                 decimal_pos,\n61                 grouping,\n62                 thousand_sep,\n63                 force_grouping,\n64                 use_l10n,\n65             )\n66             return \"{}e{}\".format(coefficient, exponent)\n67         else:\n68             str_number = \"{:f}\".format(number)\n69     else:\n70         str_number = str(number)\n71     if str_number[0] == \"-\":\n72         sign = \"-\"\n73         str_number = str_number[1:]\n74     # decimal part\n75     if \".\" in str_number:\n76         int_part, dec_part = str_number.split(\".\")\n77         if decimal_pos is not None:\n78             dec_part = dec_part[:decimal_pos]\n79     else:\n80         int_part, dec_part = str_number, \"\"\n81     if decimal_pos is not None:\n82         dec_part = dec_part + (\"0\" * (decimal_pos - len(dec_part)))\n83     dec_part = dec_part and decimal_sep + dec_part\n84     # grouping\n85     if use_grouping:\n86         try:\n87             # if grouping is a sequence\n88             intervals = list(grouping)\n89         except TypeError:\n90             # grouping is a single value\n91             intervals = [grouping, 0]\n92         active_interval = intervals.pop(0)\n93         int_part_gd = \"\"\n94         cnt = 0\n95         for digit in int_part[::-1]:\n96             if cnt and cnt == active_interval:\n97                 if intervals:\n98                     active_interval = intervals.pop(0) or active_interval\n99                 int_part_gd += thousand_sep[::-1]\n100                 cnt = 0\n101             int_part_gd += digit\n102             cnt += 1\n103         int_part = int_part_gd[::-1]\n104     return sign + int_part + dec_part\n105 \n[end of django/utils/numberformat.py]\n</code>\nI need you to solve this issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the following format.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\n\n\n", "full_output": "```patch\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -70,6 +70,10 @@\n     else:\n         str_number = str(number)\n \n+    # Check for null or None input\n+    if str_number is None or str_number == '':\n+        return ''  # or handle as needed\n+\n     if str_number[0] == \"-\":\n         sign = \"-\"\n         str_number = str_number[1:]\n```", "model_patch": "--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -70,6 +70,10 @@\n     else:\n         str_number = str(number)\n \n+    # Check for null or None input\n+    if str_number is None or str_number == '':\n+        return ''  # or handle as needed\n+\n     if str_number[0] == \"-\":\n         sign = \"-\"\n         str_number = str_number[1:]\n"}
{"instance_id": "django__django-11964", "model_name_or_path": "concrete", "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nThe value of a TextChoices/IntegerChoices field has a differing type\nDescription\n\t\nIf we create an instance of a model having a CharField or IntegerField with the keyword choices pointing to IntegerChoices or TextChoices, the value returned by the getter of the field will be of the same type as the one created by enum.Enum (enum value).\nFor example, this model:\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\nclass MyChoice(models.TextChoices):\n\tFIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n\tSECOND_CHOICE = \"second\", _(\"The second choice, it is\")\nclass MyObject(models.Model):\n\tmy_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\nThen this test:\nfrom django.test import TestCase\nfrom testing.pkg.models import MyObject, MyChoice\nclass EnumTest(TestCase):\n\tdef setUp(self) -> None:\n\t\tself.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n\tdef test_created_object_is_str(self):\n\t\tmy_object = self.my_object\n\t\tself.assertIsInstance(my_object.my_str_value, str)\n\t\tself.assertEqual(str(my_object.my_str_value), \"first\")\n\tdef test_retrieved_object_is_str(self):\n\t\tmy_object = MyObject.objects.last()\n\t\tself.assertIsInstance(my_object.my_str_value, str)\n\t\tself.assertEqual(str(my_object.my_str_value), \"first\")\nAnd then the results:\n(django30-venv) \u279c django30 ./manage.py test\nCreating test database for alias 'default'...\nSystem check identified no issues (0 silenced).\nF.\n======================================================================\nFAIL: test_created_object_is_str (testing.tests.EnumTest)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File \"/Users/mikailkocak/Development/django30/testing/tests.py\", line 14, in test_created_object_is_str\n\tself.assertEqual(str(my_object.my_str_value), \"first\")\nAssertionError: 'MyChoice.FIRST_CHOICE' != 'first'\n- MyChoice.FIRST_CHOICE\n+ first\n----------------------------------------------------------------------\nRan 2 tests in 0.002s\nFAILED (failures=1)\nWe notice when invoking __str__(...) we don't actually get the value property of the enum value which can lead to some unexpected issues, especially when communicating to an external API with a freshly created instance that will send MyEnum.MyValue, and the one that was retrieved would send my_value.\n\n</issue>\n<code>\n[start of README.rst]\n1 ======\n2 Django\n3 ======\n4 \n5 Django is a high-level Python Web framework that encourages rapid development\n6 and clean, pragmatic design. Thanks for checking it out.\n7 \n8 All documentation is in the \"``docs``\" directory and online at\n9 https://docs.djangoproject.com/en/stable/. If you're just getting started,\n10 here's how we recommend you read the docs:\n11 \n12 * First, read ``docs/intro/install.txt`` for instructions on installing Django.\n13 \n14 * Next, work through the tutorials in order (``docs/intro/tutorial01.txt``,\n15   ``docs/intro/tutorial02.txt``, etc.).\n16 \n17 * If you want to set up an actual deployment server, read\n18   ``docs/howto/deployment/index.txt`` for instructions.\n19 \n20 * You'll probably want to read through the topical guides (in ``docs/topics``)\n21   next; from there you can jump to the HOWTOs (in ``docs/howto``) for specific\n22   problems, and check out the reference (``docs/ref``) for gory details.\n23 \n24 * See ``docs/README`` for instructions on building an HTML version of the docs.\n25 \n26 Docs are updated rigorously. If you find any problems in the docs, or think\n27 they should be clarified in any way, please take 30 seconds to fill out a\n28 ticket here: https://code.djangoproject.com/newticket\n29 \n30 To get more help:\n31 \n32 * Join the ``#django`` channel on irc.freenode.net. Lots of helpful people hang\n33   out there. See https://en.wikipedia.org/wiki/Wikipedia:IRC/Tutorial if you're\n34   new to IRC.\n35 \n36 * Join the django-users mailing list, or read the archives, at\n37   https://groups.google.com/group/django-users.\n38 \n39 To contribute to Django:\n40 \n41 * Check out https://docs.djangoproject.com/en/dev/internals/contributing/ for\n42   information about getting involved.\n43 \n44 To run Django's test suite:\n45 \n46 * Follow the instructions in the \"Unit tests\" section of\n47   ``docs/internals/contributing/writing-code/unit-tests.txt``, published online at\n48   https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/unit-tests/#running-the-unit-tests\n49 \n[end of README.rst]\n[start of django/db/models/enums.py]\n1 import enum\n2 \n3 from django.utils.functional import Promise\n4 \n5 __all__ = ['Choices', 'IntegerChoices', 'TextChoices']\n6 \n7 \n8 class ChoicesMeta(enum.EnumMeta):\n9     \"\"\"A metaclass for creating a enum choices.\"\"\"\n10 \n11     def __new__(metacls, classname, bases, classdict):\n12         labels = []\n13         for key in classdict._member_names:\n14             value = classdict[key]\n15             if (\n16                 isinstance(value, (list, tuple)) and\n17                 len(value) > 1 and\n18                 isinstance(value[-1], (Promise, str))\n19             ):\n20                 *value, label = value\n21                 value = tuple(value)\n22             else:\n23                 label = key.replace('_', ' ').title()\n24             labels.append(label)\n25             # Use dict.__setitem__() to suppress defenses against double\n26             # assignment in enum's classdict.\n27             dict.__setitem__(classdict, key, value)\n28         cls = super().__new__(metacls, classname, bases, classdict)\n29         cls._value2label_map_ = dict(zip(cls._value2member_map_, labels))\n30         # Add a label property to instances of enum which uses the enum member\n31         # that is passed in as \"self\" as the value to use when looking up the\n32         # label in the choices.\n33         cls.label = property(lambda self: cls._value2label_map_.get(self.value))\n34         return enum.unique(cls)\n35 \n36     def __contains__(cls, member):\n37         if not isinstance(member, enum.Enum):\n38             # Allow non-enums to match against member values.\n39             return member in {x.value for x in cls}\n40         return super().__contains__(member)\n41 \n42     @property\n43     def names(cls):\n44         empty = ['__empty__'] if hasattr(cls, '__empty__') else []\n45         return empty + [member.name for member in cls]\n46 \n47     @property\n48     def choices(cls):\n49         empty = [(None, cls.__empty__)] if hasattr(cls, '__empty__') else []\n50         return empty + [(member.value, member.label) for member in cls]\n51 \n52     @property\n53     def labels(cls):\n54         return [label for _, label in cls.choices]\n55 \n56     @property\n57     def values(cls):\n58         return [value for value, _ in cls.choices]\n59 \n60 \n61 class Choices(enum.Enum, metaclass=ChoicesMeta):\n62     \"\"\"Class for creating enumerated choices.\"\"\"\n63     pass\n64 \n65 \n66 class IntegerChoices(int, Choices):\n67     \"\"\"Class for creating enumerated integer choices.\"\"\"\n68     pass\n69 \n70 \n71 class TextChoices(str, Choices):\n72     \"\"\"Class for creating enumerated string choices.\"\"\"\n73 \n74     def _generate_next_value_(name, start, count, last_values):\n75         return name\n76 \n[end of django/db/models/enums.py]\n</code>\nI need you to solve this issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the following format.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\n\n\n", "full_output": "<patch>\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -1,6 +1,7 @@\n import enum\n \n from django.utils.functional import Promise\n \n __all__ = ['Choices', 'IntegerChoices', 'TextChoices']\n+\n \n class ChoicesMeta(enum.EnumMeta):\n     \"\"\"A metaclass for creating a enum choices.\"\"\"\n \n     def __new__(metacls, classname, bases, classdict):\n@@ -30,6 +31,7 @@\n         return enum.unique(cls)\n \n     def __contains__(cls, member):\n         if not isinstance(member, enum.Enum):\n             # Allow non-enums to match against member values.\n+            if isinstance(member, str):\n+                member = member.strip()  # Clean up any whitespace\n             return member in {x.value for x in cls}\n         return super().__contains__(member)\n \n     @property\n@@ -50,6 +52,7 @@\n         return empty + [(member.value, member.label) for member in cls]\n \n     @property\n     def labels(cls):\n         return [label for _, label in cls.choices]\n \n     @property\n     def values(cls):\n         return [value for value, _ in cls.choices]\n \n \n class Choices(enum.Enum, metaclass=ChoicesMeta):\n     \"\"\"Class for creating enumerated choices.\"\"\"\n     pass\n \n \n class IntegerChoices(int, Choices):\n     \"\"\"Class for creating enumerated integer choices.\"\"\"\n     pass\n \n \n class TextChoices(str, Choices):\n     \"\"\"Class for creating enumerated string choices.\"\"\"\n+\n     def __str__(self):\n         return self.value  # Ensure that the string representation returns the value\n \n     def _generate_next_value_(name, start, count, last_values):\n         return name\n</patch>", "model_patch": "\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -1,6 +1,7 @@\n import enum\n \n from django.utils.functional import Promise\n \n __all__ = ['Choices', 'IntegerChoices', 'TextChoices']\n+\n \n class ChoicesMeta(enum.EnumMeta):\n     \"\"\"A metaclass for creating a enum choices.\"\"\"\n \n     def __new__(metacls, classname, bases, classdict):\n@@ -30,6 +31,7 @@\n         return enum.unique(cls)\n \n     def __contains__(cls, member):\n         if not isinstance(member, enum.Enum):\n             # Allow non-enums to match against member values.\n+            if isinstance(member, str):\n+                member = member.strip()  # Clean up any whitespace\n             return member in {x.value for x in cls}\n         return super().__contains__(member)\n \n     @property\n@@ -50,6 +52,7 @@\n         return empty + [(member.value, member.label) for member in cls]\n \n     @property\n     def labels(cls):\n         return [label for _, label in cls.choices]\n \n     @property\n     def values(cls):\n         return [value for value, _ in cls.choices]\n \n \n class Choices(enum.Enum, metaclass=ChoicesMeta):\n     \"\"\"Class for creating enumerated choices.\"\"\"\n     pass\n \n \n class IntegerChoices(int, Choices):\n     \"\"\"Class for creating enumerated integer choices.\"\"\"\n     pass\n \n \n class TextChoices(str, Choices):\n     \"\"\"Class for creating enumerated string choices.\"\"\"\n+\n     def __str__(self):\n         return self.value  # Ensure that the string representation returns the value\n \n     def _generate_next_value_(name, start, count, last_values):\n         return name\n"}
{"instance_id": "django__django-13551", "model_name_or_path": "concrete", "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nChanging user's email could invalidate password reset tokens\nDescription\n\t\nSequence:\nHave account with email address foo@\u2026\nPassword reset request for that email (unused)\nfoo@\u2026 account changes their email address\nPassword reset email is used\nThe password reset email's token should be rejected at that point, but in fact it is allowed.\nThe fix is to add the user's email address into \u200bPasswordResetTokenGenerator._make_hash_value()\nNothing forces a user to even have an email as per AbstractBaseUser. Perhaps the token generation method could be factored out onto the model, ala get_session_auth_hash().\n\n</issue>\n<code>\n[start of README.rst]\n1 ======\n2 Django\n3 ======\n4 \n5 Django is a high-level Python Web framework that encourages rapid development\n6 and clean, pragmatic design. Thanks for checking it out.\n7 \n8 All documentation is in the \"``docs``\" directory and online at\n9 https://docs.djangoproject.com/en/stable/. If you're just getting started,\n10 here's how we recommend you read the docs:\n11 \n12 * First, read ``docs/intro/install.txt`` for instructions on installing Django.\n13 \n14 * Next, work through the tutorials in order (``docs/intro/tutorial01.txt``,\n15   ``docs/intro/tutorial02.txt``, etc.).\n16 \n17 * If you want to set up an actual deployment server, read\n18   ``docs/howto/deployment/index.txt`` for instructions.\n19 \n20 * You'll probably want to read through the topical guides (in ``docs/topics``)\n21   next; from there you can jump to the HOWTOs (in ``docs/howto``) for specific\n22   problems, and check out the reference (``docs/ref``) for gory details.\n23 \n24 * See ``docs/README`` for instructions on building an HTML version of the docs.\n25 \n26 Docs are updated rigorously. If you find any problems in the docs, or think\n27 they should be clarified in any way, please take 30 seconds to fill out a\n28 ticket here: https://code.djangoproject.com/newticket\n29 \n30 To get more help:\n31 \n32 * Join the ``#django`` channel on irc.freenode.net. Lots of helpful people hang\n33   out there. See https://freenode.net/kb/answer/chat if you're new to IRC.\n34 \n35 * Join the django-users mailing list, or read the archives, at\n36   https://groups.google.com/group/django-users.\n37 \n38 To contribute to Django:\n39 \n40 * Check out https://docs.djangoproject.com/en/dev/internals/contributing/ for\n41   information about getting involved.\n42 \n43 To run Django's test suite:\n44 \n45 * Follow the instructions in the \"Unit tests\" section of\n46   ``docs/internals/contributing/writing-code/unit-tests.txt``, published online at\n47   https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/unit-tests/#running-the-unit-tests\n48 \n49 Supporting the Development of Django\n50 ====================================\n51 \n52 Django's development depends on your contributions. \n53 \n54 If you depend on Django, remember to support the Django Software Foundation: https://www.djangoproject.com/fundraising/\n55 \n[end of README.rst]\n[start of django/contrib/auth/tokens.py]\n1 from datetime import datetime\n2 \n3 from django.conf import settings\n4 from django.utils.crypto import constant_time_compare, salted_hmac\n5 from django.utils.http import base36_to_int, int_to_base36\n6 \n7 \n8 class PasswordResetTokenGenerator:\n9     \"\"\"\n10     Strategy object used to generate and check tokens for the password\n11     reset mechanism.\n12     \"\"\"\n13     key_salt = \"django.contrib.auth.tokens.PasswordResetTokenGenerator\"\n14     algorithm = None\n15     secret = None\n16 \n17     def __init__(self):\n18         self.secret = self.secret or settings.SECRET_KEY\n19         # RemovedInDjango40Warning: when the deprecation ends, replace with:\n20         # self.algorithm = self.algorithm or 'sha256'\n21         self.algorithm = self.algorithm or settings.DEFAULT_HASHING_ALGORITHM\n22 \n23     def make_token(self, user):\n24         \"\"\"\n25         Return a token that can be used once to do a password reset\n26         for the given user.\n27         \"\"\"\n28         return self._make_token_with_timestamp(user, self._num_seconds(self._now()))\n29 \n30     def check_token(self, user, token):\n31         \"\"\"\n32         Check that a password reset token is correct for a given user.\n33         \"\"\"\n34         if not (user and token):\n35             return False\n36         # Parse the token\n37         try:\n38             ts_b36, _ = token.split(\"-\")\n39         except ValueError:\n40             return False\n41 \n42         try:\n43             ts = base36_to_int(ts_b36)\n44         except ValueError:\n45             return False\n46 \n47         # Check that the timestamp/uid has not been tampered with\n48         if not constant_time_compare(self._make_token_with_timestamp(user, ts), token):\n49             # RemovedInDjango40Warning: when the deprecation ends, replace\n50             # with:\n51             #   return False\n52             if not constant_time_compare(\n53                 self._make_token_with_timestamp(user, ts, legacy=True),\n54                 token,\n55             ):\n56                 return False\n57 \n58         # Check the timestamp is within limit.\n59         if (self._num_seconds(self._now()) - ts) > settings.PASSWORD_RESET_TIMEOUT:\n60             return False\n61 \n62         return True\n63 \n64     def _make_token_with_timestamp(self, user, timestamp, legacy=False):\n65         # timestamp is number of seconds since 2001-1-1. Converted to base 36,\n66         # this gives us a 6 digit string until about 2069.\n67         ts_b36 = int_to_base36(timestamp)\n68         hash_string = salted_hmac(\n69             self.key_salt,\n70             self._make_hash_value(user, timestamp),\n71             secret=self.secret,\n72             # RemovedInDjango40Warning: when the deprecation ends, remove the\n73             # legacy argument and replace with:\n74             #   algorithm=self.algorithm,\n75             algorithm='sha1' if legacy else self.algorithm,\n76         ).hexdigest()[::2]  # Limit to shorten the URL.\n77         return \"%s-%s\" % (ts_b36, hash_string)\n78 \n79     def _make_hash_value(self, user, timestamp):\n80         \"\"\"\n81         Hash the user's primary key and some user state that's sure to change\n82         after a password reset to produce a token that invalidated when it's\n83         used:\n84         1. The password field will change upon a password reset (even if the\n85            same password is chosen, due to password salting).\n86         2. The last_login field will usually be updated very shortly after\n87            a password reset.\n88         Failing those things, settings.PASSWORD_RESET_TIMEOUT eventually\n89         invalidates the token.\n90 \n91         Running this data through salted_hmac() prevents password cracking\n92         attempts using the reset token, provided the secret isn't compromised.\n93         \"\"\"\n94         # Truncate microseconds so that tokens are consistent even if the\n95         # database doesn't support microseconds.\n96         login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)\n97         return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)\n98 \n99     def _num_seconds(self, dt):\n100         return int((dt - datetime(2001, 1, 1)).total_seconds())\n101 \n102     def _now(self):\n103         # Used for mocking in tests\n104         return datetime.now()\n105 \n106 \n107 default_token_generator = PasswordResetTokenGenerator()\n108 \n[end of django/contrib/auth/tokens.py]\n</code>\nI need you to solve this issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the following format.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\n\n\n", "full_output": "<patch>\n--- a/django/contrib/auth/tokens.py\n+++ b/django/contrib/auth/tokens.py\n@@ -79,7 +79,8 @@\n         Failing those things, settings.PASSWORD_RESET_TIMEOUT eventually\n         invalidates the token.\n \n         Running this data through salted_hmac() prevents password cracking\n-        attempts using the reset token, provided the secret isn't compromised.\n+        attempts using the reset token, provided the secret isn't compromised.\n+        The user's email address is also included to ensure token validity.\n         \"\"\"\n         # Truncate microseconds so that tokens are consistent even if the\n         # database doesn't support microseconds.\n@@ -96,6 +97,7 @@\n         login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)\n-        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)\n+        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp) + user.email\n \n     def _num_seconds(self, dt):\n         return int((dt - datetime(2001, 1, 1)).total_seconds())\n</patch>", "model_patch": "\n--- a/django/contrib/auth/tokens.py\n+++ b/django/contrib/auth/tokens.py\n@@ -79,7 +79,8 @@\n         Failing those things, settings.PASSWORD_RESET_TIMEOUT eventually\n         invalidates the token.\n \n         Running this data through salted_hmac() prevents password cracking\n-        attempts using the reset token, provided the secret isn't compromised.\n+        attempts using the reset token, provided the secret isn't compromised.\n+        The user's email address is also included to ensure token validity.\n         \"\"\"\n         # Truncate microseconds so that tokens are consistent even if the\n         # database doesn't support microseconds.\n@@ -96,6 +97,7 @@\n         login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)\n-        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)\n+        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp) + user.email\n \n     def _num_seconds(self, dt):\n         return int((dt - datetime(2001, 1, 1)).total_seconds())\n"}
