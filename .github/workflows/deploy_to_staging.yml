name: Deploy Webapps to Staging
run-name: Deploy Webapps to Staging
on:
#   workflow_dispatch:
#     inputs:
#       run_job:
#         description: 'Specify which job(s) to run'
#         required: false
#         default: 'all'
    push:
        branches:
            - michael/workflows


jobs:
    setup-venv:
        name: Setup venv for future builds/deployments
        runs-on: ubuntu-24.04
        steps:
            - uses: actions/checkout@v4

            - uses: actions/setup-python@v5
              with: 
                python-version-file: 'pyproject.toml'
        
            - uses: astral-sh/setup-uv@v3
              with:
                version: "0.4.27"

            - run: uv sync --all-extras --dev
            
            - name: Cache venv
              uses: actions/cache@v4
              with:
                path: .venv
                key: venv-${{runner.os}}-${{hashFiles('uv.lock')}}
                restore-keys: venv-${{runner.os}}-
    
    build-and-deploy: 
        name: Builds and Deploy to Staging
        runs-on: ubuntu-latest
        needs: setup-venv
        environment: staging
        strategy:
            fail-fast: false
            matrix:
                include: # Specify all env vars here
                    - image: api
                      env_vars: |
                        OPENAI_TEMPERATURE=0
                        OPENAI_API_KEY=$OPENAI_API_KEY
                    - image: main
                      env_vars: |
                        DB_PASSWORD=$DB_PASSWORD
                        DB_HOST=$DB_HOST
                    - image: homepage
                      env_vars: |
                        HTTP_SESSION_SECRET=$HTTP_SESSION_SECRET
        steps:
            - uses: actions/checkout@v4

            - uses: docker/setup-buildx-action@v3
            
            - uses: aws-actions/configure-aws-credentials@v4
              with:
                  role-to-assume: arn:aws:iam::008971649127:role/gha-ecr-write-access
                  aws-region: us-east-1

            - id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2
              with:
                  mask-password: "true" 

            - uses: actions/setup-python@v5
              with:
                python-version-file: 'pyproject.toml'

            - name: Restore venv
              uses: actions/cache@v4
              with:
                path: .venv
                key: venv-${{runner.os}}-${{hashFiles('uv.lock')}}
                restore-keys: venv-${{runner.os}}-
           
            - name: Build the images
              run: |
                touch .env 
                make build-app APP=${{ matrix.image }}
                
            - name: Push to ECR
              run: make aws-ecr-push APP=${{ matrix.image }}
            
            - uses: aws-actions/configure-aws-credentials@v4
              with:
                  role-to-assume: arn:aws:iam::008971649127:role/gha-ecs-full-access
                  aws-region: us-east-1
            
            - name: Set up .env file
              run: |
                touch .env
                echo ${{ matrix.env_vars }}>>.env

            - name: Deploy to ECS
              run: |
                uv run python -m concrete deploy \
                    --image-uri 008971649127.dkr.ecr.us-east-1.amazonaws.com/${{ matrix.image }}:latest \
                    --container-name ${{ matrix.image }}-staging \
                    --container-port 80 \
                    --container-env-file .env \
                    --security-groups sg-01af4e696bd2679c3 \
                    --subnets subnet-0644cadc735c6b557
                    --listener-arn arn:aws:elasticloadbalancing:us-east-1:008971649127:listener/app/ConcreteStagingLB/14b30997c81f806e/5f6189397e559d46 \
                    --health-check-path /ping
permissions:
  id-token: write 
  contents: read 