name: Deploy to Staging

on:
  push:
    branches:
      - michael/gha_staging

jobs:
  build-and-redeploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials for ECR Write Access
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::008971649127:role/gha-ecr-write-access
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: "true"

      - name: Build and push to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: webapp-demo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker compose -f docker/docker-compose.yml build demo
          docker tag webapp-demo:latest ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}
          docker push ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}

      - name: Configure AWS Credentials for Service Update
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::008971649127:role/gha-ecs-full-access
          aws-region: us-east-1

      - name: Deploy to ECS staging
        env:
          SERVICE: webapp-demo
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: webapp-demo
          CONTAINER_NAME: webapp_demo
          IMAGE_URI: ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}
          TASK_FAMILY: webapp_demo_staging
          EXECUTION_ROLE_ARN: arn:aws:iam::008971649127:role/ecsTaskExecutionWithSecret
          IMAGE_TAG: ${{ github.sha }}
        run: | # Update task definition to use new image
          TASK_DEFINITION=$(jq -n \
            --arg family "$TASK_FAMILY" \
            --arg name "$CONTAINER_NAME" \
            --arg image "$IMAGE_URI" \
            --argjson port 80 \
            --arg execution_role_arn "$EXECUTION_ROLE_ARN"\
            '{
                family: $family,
                executionRoleArn: $execution_role_arn,
                runtimePlatform: {
                    cpuArchitecture: "ARM64",
                    operatingSystemFamily: "LINUX"
                },
                containerDefinitions: [
                {
                    name: $name,
                    image: $image,
                    portMappings: [
                    {
                        containerPort: $port,
                        hostPort: $port,
                        protocol: "tcp"
                    }
                    ],
                    essential: true,
                    logConfiguration: {
                        logDriver: "awslogs",
                        options: {
                            "awslogs-group": "fargate-demos",
                            "awslogs-region": "us-east-1",
                            "awslogs-stream-prefix": "fg"
                        }
                    }
                }
                ],
                requiresCompatibilities: ["FARGATE"],
                networkMode: "awsvpc",
                cpu: "256",
                memory: "512",
                tags: [
                    {
                        "key": "created_by",
                        "value": "demo"
                    }
                ]
            }')

          NEW_TASK_DEFINITION=$(aws ecs register-task-definition \
            --region $AWS_DEFAULT_REGION \
            --cli-input-json "$TASK_DEFINITION" \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          aws ecs update-service --cluster DemoCluster --service ${SERVICE} --task-definition webapp_demo_staging --force-new-deployment

permissions:
  id-token: write
  contents: read
